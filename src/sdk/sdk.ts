/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDKOptions, serverURLFromOptions } from "../lib/config";
import { HTTPClient } from "../lib/http";
import { ClientSDK } from "../lib/sdks";
import { Changes } from "./changes";
import { Environments } from "./environments";
import { Events } from "./events";
import { ExecutionDetails } from "./executiondetails";
import { Feeds } from "./feeds";
import { Integrations } from "./integrations";
import { Layouts } from "./layouts";
import { Messages } from "./messages";
import { Notifications } from "./notifications";
import { Organizations } from "./organizations";
import { Subscribers } from "./subscribers";
import { Tenants } from "./tenants";
import { Topics } from "./topics";
import { WorkflowGroups } from "./workflowgroups";
import { Workflows } from "./workflows";

export class Novu extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _organizations?: Organizations;
    get organizations(): Organizations {
        return (this._organizations ??= new Organizations(this.options$));
    }

    private _environments?: Environments;
    get environments(): Environments {
        return (this._environments ??= new Environments(this.options$));
    }

    private _executionDetails?: ExecutionDetails;
    get executionDetails(): ExecutionDetails {
        return (this._executionDetails ??= new ExecutionDetails(this.options$));
    }

    private _workflows?: Workflows;
    get workflows(): Workflows {
        return (this._workflows ??= new Workflows(this.options$));
    }

    private _events?: Events;
    get events(): Events {
        return (this._events ??= new Events(this.options$));
    }

    private _notifications?: Notifications;
    get notifications(): Notifications {
        return (this._notifications ??= new Notifications(this.options$));
    }

    private _workflowGroups?: WorkflowGroups;
    get workflowGroups(): WorkflowGroups {
        return (this._workflowGroups ??= new WorkflowGroups(this.options$));
    }

    private _integrations?: Integrations;
    get integrations(): Integrations {
        return (this._integrations ??= new Integrations(this.options$));
    }

    private _changes?: Changes;
    get changes(): Changes {
        return (this._changes ??= new Changes(this.options$));
    }

    private _subscribers?: Subscribers;
    get subscribers(): Subscribers {
        return (this._subscribers ??= new Subscribers(this.options$));
    }

    private _feeds?: Feeds;
    get feeds(): Feeds {
        return (this._feeds ??= new Feeds(this.options$));
    }

    private _layouts?: Layouts;
    get layouts(): Layouts {
        return (this._layouts ??= new Layouts(this.options$));
    }

    private _messages?: Messages;
    get messages(): Messages {
        return (this._messages ??= new Messages(this.options$));
    }

    private _topics?: Topics;
    get topics(): Topics {
        return (this._topics ??= new Topics(this.options$));
    }

    private _tenants?: Tenants;
    get tenants(): Tenants {
        return (this._tenants ??= new Tenants(this.options$));
    }
}
