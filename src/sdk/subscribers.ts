/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import { SecurityInput } from "../lib/security";
import * as components from "../models/components";
import * as operations from "../models/operations";
import { createPageIterator, PageIterator, Paginator } from "../types";
import { NovuNotifications } from "./novunotifications";
import { Preferences } from "./preferences";
import jp from "jsonpath";
import * as z from "zod";

export class Subscribers extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _preferences?: Preferences;
    get preferences(): Preferences {
        return (this._preferences ??= new Preferences(this.options$));
    }

    private _notifications?: NovuNotifications;
    get notifications(): NovuNotifications {
        return (this._notifications ??= new NovuNotifications(this.options$));
    }

    /**
     * Get subscribers
     *
     * @remarks
     * Returns a list of subscribers, could paginated using the `page` and `limit` query parameter
     */
    async list(
        security: operations.ListSubscribersSecurity,
        page?: number | undefined,
        limit?: number | undefined,
        options?: RequestOptions
    ): Promise<PageIterator<operations.ListSubscribersResponse>> {
        const input$: operations.ListSubscribersRequest = {
            page: page,
            limit: limit,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ListSubscribersRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/subscribers")();

        const query$ = encodeFormQuery$({
            page: payload$.page,
            limit: payload$.limit,
        });

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.bearer,
                },
            ],
            [
                {
                    fieldName: "Authorization",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "listSubscribers",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = { context, errorCodes: ["409", "429", "4XX", "503", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$, raw$] = await this.matcher<operations.ListSubscribersResponse>()
            .json(200, operations.ListSubscribersResponse$, { key: "Result" })
            .fail([409, 429, "4XX", 503, "5XX"])
            .match(response, { extraFields: responseFields$ });

        const nextFunc = (responseData: unknown): Paginator<operations.ListSubscribersResponse> => {
            const page = input$.page || 0;
            const nextPage = page + 1;

            if (!responseData) {
                return () => null;
            }
            const results = jp.value(responseData, "$.data.resultArray");
            if (!results.length) {
                return () => null;
            }
            const limit = input$.limit || 0;
            if (results.length < limit) {
                return () => null;
            }

            return () => this.list(security, nextPage, limit, options);
        };

        const page$ = { ...result$, next: nextFunc(raw$) };
        return { ...page$, ...createPageIterator(page$) };
    }

    /**
     * Create subscriber
     *
     * @remarks
     * Creates a subscriber entity, in the Novu platform. The subscriber will be later used to receive notifications, and access notification feeds. Communication credentials such as email, phone number, and 3 rd party credentials i.e slack tokens could be later associated to this entity.
     */
    async create(
        request: components.CreateSubscriberRequestDto,
        security: operations.CreateSubscriberSecurity,
        options?: RequestOptions
    ): Promise<components.SubscriberResponseDto> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => components.CreateSubscriberRequestDto$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/subscribers")();

        const query$ = "";

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.bearer,
                },
            ],
            [
                {
                    fieldName: "Authorization",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "createSubscriber",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = { context, errorCodes: ["409", "429", "4XX", "503", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<components.SubscriberResponseDto>()
            .json(201, components.SubscriberResponseDto$)
            .fail([409, 429, "4XX", 503, "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Get subscriber
     *
     * @remarks
     * Get subscriber by your internal id used to identify the subscriber
     */
    async retrieve(
        security: operations.GetSubscriberSecurity,
        subscriberId: string,
        options?: RequestOptions
    ): Promise<components.SubscriberResponseDto> {
        const input$: operations.GetSubscriberRequest = {
            subscriberId: subscriberId,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetSubscriberRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            subscriberId: encodeSimple$("subscriberId", payload$.subscriberId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/subscribers/{subscriberId}")(pathParams$);

        const query$ = "";

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.bearer,
                },
            ],
            [
                {
                    fieldName: "Authorization",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "getSubscriber",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = { context, errorCodes: ["409", "429", "4XX", "503", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<components.SubscriberResponseDto>()
            .json(200, components.SubscriberResponseDto$)
            .fail([409, 429, "4XX", 503, "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Update subscriber
     *
     * @remarks
     * Used to update the subscriber entity with new information
     */
    async updateSubscriber(
        security: operations.UpdateSubscriberSecurity,
        subscriberId: string,
        updateSubscriberRequestDto: components.UpdateSubscriberRequestDto,
        options?: RequestOptions
    ): Promise<components.SubscriberResponseDto> {
        const input$: operations.UpdateSubscriberRequest = {
            subscriberId: subscriberId,
            updateSubscriberRequestDto: updateSubscriberRequestDto,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.UpdateSubscriberRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.UpdateSubscriberRequestDto, { explode: true });

        const pathParams$ = {
            subscriberId: encodeSimple$("subscriberId", payload$.subscriberId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/subscribers/{subscriberId}")(pathParams$);

        const query$ = "";

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.bearer,
                },
            ],
            [
                {
                    fieldName: "Authorization",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "updateSubscriber",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = { context, errorCodes: ["409", "429", "4XX", "503", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<components.SubscriberResponseDto>()
            .json(200, components.SubscriberResponseDto$)
            .fail([409, 429, "4XX", 503, "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Delete subscriber
     *
     * @remarks
     * Deletes a subscriber entity from the Novu platform
     */
    async removeSubscriber(
        security: operations.RemoveSubscriberSecurity,
        subscriberId: string,
        options?: RequestOptions
    ): Promise<components.DeleteSubscriberResponseDto> {
        const input$: operations.RemoveSubscriberRequest = {
            subscriberId: subscriberId,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.RemoveSubscriberRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            subscriberId: encodeSimple$("subscriberId", payload$.subscriberId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/subscribers/{subscriberId}")(pathParams$);

        const query$ = "";

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.bearer,
                },
            ],
            [
                {
                    fieldName: "Authorization",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "removeSubscriber",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = { context, errorCodes: ["409", "429", "4XX", "503", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<components.DeleteSubscriberResponseDto>()
            .json(200, components.DeleteSubscriberResponseDto$)
            .fail([409, 429, "4XX", 503, "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Bulk create subscribers
     *
     * @remarks
     *
     *       Using this endpoint you can create multiple subscribers at once, to avoid multiple calls to the API.
     *       The bulk API is limited to 500 subscribers per request.
     *
     */
    async bulkCreateSubscribers(
        request: components.BulkSubscriberCreateDto,
        security: operations.BulkCreateSubscribersSecurity,
        options?: RequestOptions
    ): Promise<void> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = schemas$.parse(
            input$,
            (value$) => components.BulkSubscriberCreateDto$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/subscribers/bulk")();

        const query$ = "";

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.bearer,
                },
            ],
            [
                {
                    fieldName: "Authorization",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "bulkCreateSubscribers",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = { context, errorCodes: ["409", "429", "4XX", "503", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<void>()
            .void(201, z.void())
            .fail([409, 429, "4XX", 503, "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Update subscriber credentials
     *
     * @remarks
     * Subscriber credentials associated to the delivery methods such as slack and push tokens.
     */
    async updateSubscriberChannel(
        security: operations.UpdateSubscriberChannelSecurity,
        subscriberId: string,
        updateSubscriberChannelRequestDto: components.UpdateSubscriberChannelRequestDto,
        options?: RequestOptions
    ): Promise<components.SubscriberResponseDto> {
        const input$: operations.UpdateSubscriberChannelRequest = {
            subscriberId: subscriberId,
            updateSubscriberChannelRequestDto: updateSubscriberChannelRequestDto,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.UpdateSubscriberChannelRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.UpdateSubscriberChannelRequestDto, {
            explode: true,
        });

        const pathParams$ = {
            subscriberId: encodeSimple$("subscriberId", payload$.subscriberId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/subscribers/{subscriberId}/credentials")(
            pathParams$
        );

        const query$ = "";

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.bearer,
                },
            ],
            [
                {
                    fieldName: "Authorization",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "updateSubscriberChannel",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = { context, errorCodes: ["409", "429", "4XX", "503", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<components.SubscriberResponseDto>()
            .json(200, components.SubscriberResponseDto$)
            .fail([409, 429, "4XX", 503, "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Modify subscriber credentials
     *
     * @remarks
     * Subscriber credentials associated to the delivery methods such as slack and push tokens.
     *     This endpoint appends provided credentials and deviceTokens to the existing ones.
     */
    async modifySubscriberChannel(
        security: operations.ModifySubscriberChannelSecurity,
        subscriberId: string,
        updateSubscriberChannelRequestDto: components.UpdateSubscriberChannelRequestDto,
        options?: RequestOptions
    ): Promise<components.SubscriberResponseDto> {
        const input$: operations.ModifySubscriberChannelRequest = {
            subscriberId: subscriberId,
            updateSubscriberChannelRequestDto: updateSubscriberChannelRequestDto,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ModifySubscriberChannelRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.UpdateSubscriberChannelRequestDto, {
            explode: true,
        });

        const pathParams$ = {
            subscriberId: encodeSimple$("subscriberId", payload$.subscriberId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/subscribers/{subscriberId}/credentials")(
            pathParams$
        );

        const query$ = "";

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.bearer,
                },
            ],
            [
                {
                    fieldName: "Authorization",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "modifySubscriberChannel",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = { context, errorCodes: ["409", "429", "4XX", "503", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<components.SubscriberResponseDto>()
            .json(200, components.SubscriberResponseDto$)
            .fail([409, 429, "4XX", 503, "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Delete subscriber credentials by providerId
     *
     * @remarks
     * Delete subscriber credentials such as slack and expo tokens.
     */
    async delete(
        security: operations.DeleteSubscriberCredentialsSecurity,
        subscriberId: string,
        providerId: string,
        options?: RequestOptions
    ): Promise<void> {
        const input$: operations.DeleteSubscriberCredentialsRequest = {
            subscriberId: subscriberId,
            providerId: providerId,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.DeleteSubscriberCredentialsRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            providerId: encodeSimple$("providerId", payload$.providerId, {
                explode: false,
                charEncoding: "percent",
            }),
            subscriberId: encodeSimple$("subscriberId", payload$.subscriberId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/subscribers/{subscriberId}/credentials/{providerId}"
        )(pathParams$);

        const query$ = "";

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.bearer,
                },
            ],
            [
                {
                    fieldName: "Authorization",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "deleteSubscriberCredentials",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = { context, errorCodes: ["409", "429", "4XX", "503", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<void>()
            .void(204, z.void())
            .fail([409, 429, "4XX", 503, "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Update subscriber online status
     *
     * @remarks
     * Used to update the subscriber isOnline flag.
     */
    async updateSubscriberOnlineFlag(
        security: operations.UpdateSubscriberOnlineFlagSecurity,
        subscriberId: string,
        updateSubscriberOnlineFlagRequestDto: components.UpdateSubscriberOnlineFlagRequestDto,
        options?: RequestOptions
    ): Promise<components.SubscriberResponseDto> {
        const input$: operations.UpdateSubscriberOnlineFlagRequest = {
            subscriberId: subscriberId,
            updateSubscriberOnlineFlagRequestDto: updateSubscriberOnlineFlagRequestDto,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.UpdateSubscriberOnlineFlagRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.UpdateSubscriberOnlineFlagRequestDto, {
            explode: true,
        });

        const pathParams$ = {
            subscriberId: encodeSimple$("subscriberId", payload$.subscriberId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/subscribers/{subscriberId}/online-status")(
            pathParams$
        );

        const query$ = "";

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.bearer,
                },
            ],
            [
                {
                    fieldName: "Authorization",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "updateSubscriberOnlineFlag",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = { context, errorCodes: ["409", "429", "4XX", "503", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<components.SubscriberResponseDto>()
            .json(200, components.SubscriberResponseDto$)
            .fail([409, 429, "4XX", 503, "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Update subscriber global preferences
     */
    async updateSubscriberGlobalPreferences(
        security: operations.UpdateSubscriberGlobalPreferencesSecurity,
        subscriberId: string,
        updateSubscriberGlobalPreferencesRequestDto: components.UpdateSubscriberGlobalPreferencesRequestDto,
        options?: RequestOptions
    ): Promise<components.UpdateSubscriberPreferenceResponseDto> {
        const input$: operations.UpdateSubscriberGlobalPreferencesRequest = {
            subscriberId: subscriberId,
            updateSubscriberGlobalPreferencesRequestDto:
                updateSubscriberGlobalPreferencesRequestDto,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.UpdateSubscriberGlobalPreferencesRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.UpdateSubscriberGlobalPreferencesRequestDto, {
            explode: true,
        });

        const pathParams$ = {
            subscriberId: encodeSimple$("subscriberId", payload$.subscriberId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/subscribers/{subscriberId}/preferences")(
            pathParams$
        );

        const query$ = "";

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.bearer,
                },
            ],
            [
                {
                    fieldName: "Authorization",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "updateSubscriberGlobalPreferences",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = { context, errorCodes: ["409", "429", "4XX", "503", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<components.UpdateSubscriberPreferenceResponseDto>()
            .json(200, components.UpdateSubscriberPreferenceResponseDto$)
            .fail([409, 429, "4XX", 503, "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Update subscriber preference
     */
    async updateSubscriberPreference(
        request: operations.UpdateSubscriberPreferenceRequest,
        security: operations.UpdateSubscriberPreferenceSecurity,
        options?: RequestOptions
    ): Promise<components.UpdateSubscriberPreferenceResponseDto> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.UpdateSubscriberPreferenceRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.UpdateSubscriberPreferenceRequestDto, {
            explode: true,
        });

        const pathParams$ = {
            parameter: encodeSimple$("parameter", payload$.parameter, {
                explode: false,
                charEncoding: "percent",
            }),
            subscriberId: encodeSimple$("subscriberId", payload$.subscriberId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/subscribers/{subscriberId}/preferences/{parameter}"
        )(pathParams$);

        const query$ = "";

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.bearer,
                },
            ],
            [
                {
                    fieldName: "Authorization",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "updateSubscriberPreference",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = { context, errorCodes: ["409", "429", "4XX", "503", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<components.UpdateSubscriberPreferenceResponseDto>()
            .json(200, components.UpdateSubscriberPreferenceResponseDto$)
            .fail([409, 429, "4XX", 503, "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Mark a subscriber messages as seen, read, unseen or unread
     */
    async markMessagesAs(
        security: operations.MarkMessagesAsSecurity,
        subscriberId: string,
        messageMarkAsRequestDto: components.MessageMarkAsRequestDto,
        options?: RequestOptions
    ): Promise<Array<components.MessageEntity>> {
        const input$: operations.MarkMessagesAsRequest = {
            subscriberId: subscriberId,
            messageMarkAsRequestDto: messageMarkAsRequestDto,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.MarkMessagesAsRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.MessageMarkAsRequestDto, { explode: true });

        const pathParams$ = {
            subscriberId: encodeSimple$("subscriberId", payload$.subscriberId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/subscribers/{subscriberId}/messages/mark-as")(
            pathParams$
        );

        const query$ = "";

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.bearer,
                },
            ],
            [
                {
                    fieldName: "Authorization",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "markMessagesAs",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = { context, errorCodes: ["409", "429", "4XX", "503", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<Array<components.MessageEntity>>()
            .json(201, z.array(components.MessageEntity$.inboundSchema))
            .fail([409, 429, "4XX", 503, "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Marks all the subscriber messages as read, unread, seen or unseen. Optionally you can pass feed id (or array) to mark messages of a particular feed.
     */
    async markAllUnreadAsRead(
        security: operations.MarkAllUnreadAsReadSecurity,
        subscriberId: string,
        markAllMessageAsRequestDto: components.MarkAllMessageAsRequestDto,
        options?: RequestOptions
    ): Promise<number> {
        const input$: operations.MarkAllUnreadAsReadRequest = {
            subscriberId: subscriberId,
            markAllMessageAsRequestDto: markAllMessageAsRequestDto,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.MarkAllUnreadAsReadRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.MarkAllMessageAsRequestDto, { explode: true });

        const pathParams$ = {
            subscriberId: encodeSimple$("subscriberId", payload$.subscriberId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/subscribers/{subscriberId}/messages/mark-all")(
            pathParams$
        );

        const query$ = "";

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.bearer,
                },
            ],
            [
                {
                    fieldName: "Authorization",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "markAllUnreadAsRead",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = { context, errorCodes: ["409", "429", "4XX", "503", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<number>()
            .json(201, z.number())
            .fail([409, 429, "4XX", 503, "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Mark message action as seen
     */
    async markActionAsSeen(
        request: operations.MarkActionAsSeenRequest,
        security: operations.MarkActionAsSeenSecurity,
        options?: RequestOptions
    ): Promise<components.MessageResponseDto> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.MarkActionAsSeenRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.MarkMessageActionAsSeenDto, { explode: true });

        const pathParams$ = {
            messageId: encodeSimple$("messageId", payload$.messageId, {
                explode: false,
                charEncoding: "percent",
            }),
            subscriberId: encodeSimple$("subscriberId", payload$.subscriberId, {
                explode: false,
                charEncoding: "percent",
            }),
            type: encodeSimple$("type", payload$.type, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent(
            "/subscribers/{subscriberId}/messages/{messageId}/actions/{type}"
        )(pathParams$);

        const query$ = "";

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.bearer,
                },
            ],
            [
                {
                    fieldName: "Authorization",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "markActionAsSeen",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = { context, errorCodes: ["409", "429", "4XX", "503", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<components.MessageResponseDto>()
            .json(201, components.MessageResponseDto$)
            .fail([409, 429, "4XX", 503, "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Handle providers oauth redirect
     */
    async chatOauthCallback(
        request: operations.ChatOauthCallbackRequest,
        security: operations.ChatOauthCallbackSecurity,
        options?: RequestOptions
    ): Promise<operations.ChatOauthCallbackResponseBody> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ChatOauthCallbackRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            providerId: encodeSimple$("providerId", payload$.providerId, {
                explode: false,
                charEncoding: "percent",
            }),
            subscriberId: encodeSimple$("subscriberId", payload$.subscriberId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/subscribers/{subscriberId}/credentials/{providerId}/oauth/callback"
        )(pathParams$);

        const query$ = encodeFormQuery$({
            code: payload$.code,
            hmacHash: payload$.hmacHash,
            environmentId: payload$.environmentId,
            integrationIdentifier: payload$.integrationIdentifier,
        });

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "chatOauthCallback",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = { context, errorCodes: ["409", "429", "4XX", "503", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<operations.ChatOauthCallbackResponseBody>()
            .json(200, operations.ChatOauthCallbackResponseBody$)
            .fail([409, 429, "4XX", 503, "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Handle chat oauth
     */
    async chatAccessOauth(
        request: operations.ChatAccessOauthRequest,
        security: operations.ChatAccessOauthSecurity,
        options?: RequestOptions
    ): Promise<void> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ChatAccessOauthRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            providerId: encodeSimple$("providerId", payload$.providerId, {
                explode: false,
                charEncoding: "percent",
            }),
            subscriberId: encodeSimple$("subscriberId", payload$.subscriberId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/subscribers/{subscriberId}/credentials/{providerId}/oauth"
        )(pathParams$);

        const query$ = encodeFormQuery$({
            hmacHash: payload$.hmacHash,
            environmentId: payload$.environmentId,
            integrationIdentifier: payload$.integrationIdentifier,
        });

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "chatAccessOauth",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = { context, errorCodes: ["409", "429", "4XX", "503", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<void>()
            .void(200, z.void())
            .fail([409, 429, "4XX", 503, "5XX"])
            .match(response);

        return result$;
    }
}
