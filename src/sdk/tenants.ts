/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import { SecurityInput } from "../lib/security";
import * as components from "../models/components";
import * as operations from "../models/operations";
import { createPageIterator, PageIterator, Paginator } from "../types";
import jp from "jsonpath";
import * as z from "zod";

export class Tenants extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Get tenants
     *
     * @remarks
     * Returns a list of tenants, could paginated using the `page` and `limit` query parameter
     */
    async list(
        security: operations.ListTenantsSecurity,
        page?: number | undefined,
        limit?: number | undefined,
        options?: RequestOptions
    ): Promise<PageIterator<operations.ListTenantsResponse>> {
        const input$: operations.ListTenantsRequest = {
            page: page,
            limit: limit,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ListTenantsRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/tenants")();

        const query$ = encodeFormQuery$({
            page: payload$.page,
            limit: payload$.limit,
        });

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.bearer,
                },
            ],
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.bearer1,
                },
            ],
            [
                {
                    fieldName: "Authorization",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = { operationID: "listTenants", oAuth2Scopes: [], securitySource: security$ };

        const doOptions = { context, errorCodes: ["409", "429", "4XX", "503", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$, raw$] = await this.matcher<operations.ListTenantsResponse>()
            .json(200, operations.ListTenantsResponse$, { key: "Result" })
            .fail([409, 429, "4XX", 503, "5XX"])
            .match(response, { extraFields: responseFields$ });

        const nextFunc = (responseData: unknown): Paginator<operations.ListTenantsResponse> => {
            const page = input$.page || 0;
            const nextPage = page + 1;

            if (!responseData) {
                return () => null;
            }
            const results = jp.value(responseData, "$.data.resultArray");
            if (!results.length) {
                return () => null;
            }
            const limit = input$.limit || 0;
            if (results.length < limit) {
                return () => null;
            }

            return () => this.list(security, nextPage, limit, options);
        };

        const page$ = { ...result$, next: nextFunc(raw$) };
        return { ...page$, ...createPageIterator(page$) };
    }

    /**
     * Create tenant
     *
     * @remarks
     * Create tenant under the current environment
     */
    async create(
        request: components.CreateTenantRequestDto,
        security: operations.CreateTenantSecurity,
        options?: RequestOptions
    ): Promise<components.CreateTenantResponseDto> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => components.CreateTenantRequestDto$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/tenants")();

        const query$ = "";

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.bearer,
                },
            ],
            [
                {
                    fieldName: "Authorization",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "createTenant",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = { context, errorCodes: ["409", "429", "4XX", "503", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<components.CreateTenantResponseDto>()
            .json([200, 201], components.CreateTenantResponseDto$)
            .fail([409, 429, "4XX", 503, "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Get tenant
     *
     * @remarks
     * Get tenant by your internal id used to identify the tenant
     */
    async retrieve(
        security: operations.GetTenantByIdSecurity,
        identifier: string,
        options?: RequestOptions
    ): Promise<components.GetTenantResponseDto> {
        const input$: operations.GetTenantByIdRequest = {
            identifier: identifier,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetTenantByIdRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            identifier: encodeSimple$("identifier", payload$.identifier, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/tenants/{identifier}")(pathParams$);

        const query$ = "";

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.bearer,
                },
            ],
            [
                {
                    fieldName: "Authorization",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "getTenantById",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = { context, errorCodes: ["404", "409", "429", "4XX", "503", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<components.GetTenantResponseDto>()
            .json(200, components.GetTenantResponseDto$)
            .fail([404, 409, 429, "4XX", 503, "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Delete tenant
     *
     * @remarks
     * Deletes a tenant entity from the Novu platform
     */
    async removeTenant(
        security: operations.RemoveTenantSecurity,
        identifier: string,
        options?: RequestOptions
    ): Promise<void> {
        const input$: operations.RemoveTenantRequest = {
            identifier: identifier,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.RemoveTenantRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            identifier: encodeSimple$("identifier", payload$.identifier, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/tenants/{identifier}")(pathParams$);

        const query$ = "";

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.bearer,
                },
            ],
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.bearer1,
                },
            ],
            [
                {
                    fieldName: "Authorization",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "removeTenant",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = { context, errorCodes: ["404", "409", "429", "4XX", "503", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<void>()
            .void(204, z.void())
            .fail([404, 409, 429, "4XX", 503, "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Update tenant
     *
     * @remarks
     * Update tenant by your internal id used to identify the tenant
     */
    async updateTenant(
        security: operations.UpdateTenantSecurity,
        identifier: string,
        updateTenantRequestDto: components.UpdateTenantRequestDto,
        options?: RequestOptions
    ): Promise<components.UpdateTenantResponseDto> {
        const input$: operations.UpdateTenantRequest = {
            identifier: identifier,
            updateTenantRequestDto: updateTenantRequestDto,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.UpdateTenantRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.UpdateTenantRequestDto, { explode: true });

        const pathParams$ = {
            identifier: encodeSimple$("identifier", payload$.identifier, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/tenants/{identifier}")(pathParams$);

        const query$ = "";

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.bearer,
                },
            ],
            [
                {
                    fieldName: "Authorization",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "updateTenant",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = { context, errorCodes: ["404", "409", "429", "4XX", "503", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<components.UpdateTenantResponseDto>()
            .json(200, components.UpdateTenantResponseDto$)
            .fail([404, 409, 429, "4XX", 503, "5XX"])
            .match(response);

        return result$;
    }
}
