/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import { DelayRegularMetadata, DelayRegularMetadata$ } from "./delayregularmetadata";
import { DelayScheduledMetadata, DelayScheduledMetadata$ } from "./delayscheduledmetadata";
import { DigestRegularMetadata, DigestRegularMetadata$ } from "./digestregularmetadata";
import { DigestTimedMetadata, DigestTimedMetadata$ } from "./digesttimedmetadata";
import { MessageTemplate, MessageTemplate$ } from "./messagetemplate";
import { NotificationStepVariant, NotificationStepVariant$ } from "./notificationstepvariant";
import { StepFilter, StepFilter$ } from "./stepfilter";
import * as z from "zod";

export type ParentId = {};

export type Metadata =
    | DelayScheduledMetadata
    | DelayRegularMetadata
    | DigestTimedMetadata
    | DigestRegularMetadata;

export type ReplyCallback = {};

export type NotificationStep = {
    id?: string | undefined;
    uuid?: string | undefined;
    name?: string | undefined;
    templateId?: string | undefined;
    active?: boolean | undefined;
    shouldStopOnFail?: boolean | undefined;
    template?: MessageTemplate | undefined;
    filters?: Array<StepFilter> | undefined;
    parentId?: ParentId | undefined;
    metadata?:
        | DelayScheduledMetadata
        | DelayRegularMetadata
        | DigestTimedMetadata
        | DigestRegularMetadata
        | undefined;
    replyCallback?: ReplyCallback | undefined;
    variants?: NotificationStepVariant | undefined;
};

/** @internal */
export namespace ParentId$ {
    export const inboundSchema: z.ZodType<ParentId, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ParentId> = z.object({});
}

/** @internal */
export namespace Metadata$ {
    export const inboundSchema: z.ZodType<Metadata, z.ZodTypeDef, unknown> = z.union([
        DelayScheduledMetadata$.inboundSchema,
        DelayRegularMetadata$.inboundSchema,
        DigestTimedMetadata$.inboundSchema,
        DigestRegularMetadata$.inboundSchema,
    ]);

    export type Outbound =
        | DelayScheduledMetadata$.Outbound
        | DelayRegularMetadata$.Outbound
        | DigestTimedMetadata$.Outbound
        | DigestRegularMetadata$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Metadata> = z.union([
        DelayScheduledMetadata$.outboundSchema,
        DelayRegularMetadata$.outboundSchema,
        DigestTimedMetadata$.outboundSchema,
        DigestRegularMetadata$.outboundSchema,
    ]);
}

/** @internal */
export namespace ReplyCallback$ {
    export const inboundSchema: z.ZodType<ReplyCallback, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReplyCallback> = z.object({});
}

/** @internal */
export namespace NotificationStep$ {
    export const inboundSchema: z.ZodType<NotificationStep, z.ZodTypeDef, unknown> = z
        .object({
            _id: z.string().optional(),
            uuid: z.string().optional(),
            name: z.string().optional(),
            _templateId: z.string().optional(),
            active: z.boolean().optional(),
            shouldStopOnFail: z.boolean().optional(),
            template: MessageTemplate$.inboundSchema.optional(),
            filters: z.array(StepFilter$.inboundSchema).optional(),
            _parentId: z.lazy(() => ParentId$.inboundSchema).optional(),
            metadata: z
                .union([
                    DelayScheduledMetadata$.inboundSchema,
                    DelayRegularMetadata$.inboundSchema,
                    DigestTimedMetadata$.inboundSchema,
                    DigestRegularMetadata$.inboundSchema,
                ])
                .optional(),
            replyCallback: z.lazy(() => ReplyCallback$.inboundSchema).optional(),
            variants: NotificationStepVariant$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                _id: "id",
                _templateId: "templateId",
                _parentId: "parentId",
            });
        });

    export type Outbound = {
        _id?: string | undefined;
        uuid?: string | undefined;
        name?: string | undefined;
        _templateId?: string | undefined;
        active?: boolean | undefined;
        shouldStopOnFail?: boolean | undefined;
        template?: MessageTemplate$.Outbound | undefined;
        filters?: Array<StepFilter$.Outbound> | undefined;
        _parentId?: ParentId$.Outbound | undefined;
        metadata?:
            | DelayScheduledMetadata$.Outbound
            | DelayRegularMetadata$.Outbound
            | DigestTimedMetadata$.Outbound
            | DigestRegularMetadata$.Outbound
            | undefined;
        replyCallback?: ReplyCallback$.Outbound | undefined;
        variants?: NotificationStepVariant$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NotificationStep> = z
        .object({
            id: z.string().optional(),
            uuid: z.string().optional(),
            name: z.string().optional(),
            templateId: z.string().optional(),
            active: z.boolean().optional(),
            shouldStopOnFail: z.boolean().optional(),
            template: MessageTemplate$.outboundSchema.optional(),
            filters: z.array(StepFilter$.outboundSchema).optional(),
            parentId: z.lazy(() => ParentId$.outboundSchema).optional(),
            metadata: z
                .union([
                    DelayScheduledMetadata$.outboundSchema,
                    DelayRegularMetadata$.outboundSchema,
                    DigestTimedMetadata$.outboundSchema,
                    DigestRegularMetadata$.outboundSchema,
                ])
                .optional(),
            replyCallback: z.lazy(() => ReplyCallback$.outboundSchema).optional(),
            variants: NotificationStepVariant$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                id: "_id",
                templateId: "_templateId",
                parentId: "_parentId",
            });
        });
}
