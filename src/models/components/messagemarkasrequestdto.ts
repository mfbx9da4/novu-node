/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types";
import * as z from "zod";

export type MessageId = string | Array<string>;

export const MarkAs = {
    Read: "read",
    Seen: "seen",
    Unread: "unread",
    Unseen: "unseen",
} as const;
export type MarkAs = ClosedEnum<typeof MarkAs>;

export type MessageMarkAsRequestDto = {
    messageId: string | Array<string>;
    markAs: MarkAs;
};

/** @internal */
export namespace MessageId$ {
    export const inboundSchema: z.ZodType<MessageId, z.ZodTypeDef, unknown> = z.union([
        z.string(),
        z.array(z.string()),
    ]);

    export type Outbound = string | Array<string>;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MessageId> = z.union([
        z.string(),
        z.array(z.string()),
    ]);
}

/** @internal */
export namespace MarkAs$ {
    export const inboundSchema = z.nativeEnum(MarkAs);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace MessageMarkAsRequestDto$ {
    export const inboundSchema: z.ZodType<MessageMarkAsRequestDto, z.ZodTypeDef, unknown> =
        z.object({
            messageId: z.union([z.string(), z.array(z.string())]),
            markAs: MarkAs$.inboundSchema,
        });

    export type Outbound = {
        messageId: string | Array<string>;
        markAs: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MessageMarkAsRequestDto> =
        z.object({
            messageId: z.union([z.string(), z.array(z.string())]),
            markAs: MarkAs$.outboundSchema,
        });
}
