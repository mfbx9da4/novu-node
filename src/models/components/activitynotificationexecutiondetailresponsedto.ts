/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import { ClosedEnum } from "../../types";
import * as z from "zod";

export const ActivityNotificationExecutionDetailResponseDtoStatus = {
    Success: "Success",
    Warning: "Warning",
    Failed: "Failed",
    Pending: "Pending",
    Queued: "Queued",
    ReadConfirmation: "ReadConfirmation",
} as const;
export type ActivityNotificationExecutionDetailResponseDtoStatus = ClosedEnum<
    typeof ActivityNotificationExecutionDetailResponseDtoStatus
>;

export type ActivityNotificationExecutionDetailResponseDtoProviderId = {};

export const ActivityNotificationExecutionDetailResponseDtoSource = {
    Credentials: "Credentials",
    Internal: "Internal",
    Payload: "Payload",
    Webhook: "Webhook",
} as const;
export type ActivityNotificationExecutionDetailResponseDtoSource = ClosedEnum<
    typeof ActivityNotificationExecutionDetailResponseDtoSource
>;

export type ActivityNotificationExecutionDetailResponseDto = {
    id: string;
    jobId: string;
    status: ActivityNotificationExecutionDetailResponseDtoStatus;
    detail: string;
    isRetry: boolean;
    isTest: boolean;
    providerId: ActivityNotificationExecutionDetailResponseDtoProviderId;
    raw?: string | undefined;
    source: ActivityNotificationExecutionDetailResponseDtoSource;
};

/** @internal */
export namespace ActivityNotificationExecutionDetailResponseDtoStatus$ {
    export const inboundSchema = z.nativeEnum(ActivityNotificationExecutionDetailResponseDtoStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ActivityNotificationExecutionDetailResponseDtoProviderId$ {
    export const inboundSchema: z.ZodType<
        ActivityNotificationExecutionDetailResponseDtoProviderId,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ActivityNotificationExecutionDetailResponseDtoProviderId
    > = z.object({});
}

/** @internal */
export namespace ActivityNotificationExecutionDetailResponseDtoSource$ {
    export const inboundSchema = z.nativeEnum(ActivityNotificationExecutionDetailResponseDtoSource);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ActivityNotificationExecutionDetailResponseDto$ {
    export const inboundSchema: z.ZodType<
        ActivityNotificationExecutionDetailResponseDto,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            _id: z.string(),
            _jobId: z.string(),
            status: ActivityNotificationExecutionDetailResponseDtoStatus$.inboundSchema,
            detail: z.string(),
            isRetry: z.boolean(),
            isTest: z.boolean(),
            providerId: z.lazy(
                () => ActivityNotificationExecutionDetailResponseDtoProviderId$.inboundSchema
            ),
            raw: z.string().optional(),
            source: ActivityNotificationExecutionDetailResponseDtoSource$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                _id: "id",
                _jobId: "jobId",
            });
        });

    export type Outbound = {
        _id: string;
        _jobId: string;
        status: string;
        detail: string;
        isRetry: boolean;
        isTest: boolean;
        providerId: ActivityNotificationExecutionDetailResponseDtoProviderId$.Outbound;
        raw?: string | undefined;
        source: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ActivityNotificationExecutionDetailResponseDto
    > = z
        .object({
            id: z.string(),
            jobId: z.string(),
            status: ActivityNotificationExecutionDetailResponseDtoStatus$.outboundSchema,
            detail: z.string(),
            isRetry: z.boolean(),
            isTest: z.boolean(),
            providerId: z.lazy(
                () => ActivityNotificationExecutionDetailResponseDtoProviderId$.outboundSchema
            ),
            raw: z.string().optional(),
            source: ActivityNotificationExecutionDetailResponseDtoSource$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                id: "_id",
                jobId: "_jobId",
            });
        });
}
