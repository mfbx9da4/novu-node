/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import { ClosedEnum } from "../../types";
import * as z from "zod";

export const ChangeResponseDtoType = {
    Feed: "Feed",
    MessageTemplate: "MessageTemplate",
    Layout: "Layout",
    DefaultLayout: "DefaultLayout",
    NotificationTemplate: "NotificationTemplate",
    NotificationGroup: "NotificationGroup",
    TranslationGroup: "TranslationGroup",
    Translation: "Translation",
} as const;
export type ChangeResponseDtoType = ClosedEnum<typeof ChangeResponseDtoType>;

export type Change = {};

export type ChangeResponseDto = {
    id?: string | undefined;
    creatorId: string;
    environmentId: string;
    organizationId: string;
    entityId: string;
    enabled: boolean;
    type: ChangeResponseDtoType;
    change: Change;
    createdAt: string;
    parentId?: string | undefined;
};

/** @internal */
export namespace ChangeResponseDtoType$ {
    export const inboundSchema = z.nativeEnum(ChangeResponseDtoType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Change$ {
    export const inboundSchema: z.ZodType<Change, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Change> = z.object({});
}

/** @internal */
export namespace ChangeResponseDto$ {
    export const inboundSchema: z.ZodType<ChangeResponseDto, z.ZodTypeDef, unknown> = z
        .object({
            _id: z.string().optional(),
            _creatorId: z.string(),
            _environmentId: z.string(),
            _organizationId: z.string(),
            _entityId: z.string(),
            enabled: z.boolean(),
            type: ChangeResponseDtoType$.inboundSchema,
            change: z.lazy(() => Change$.inboundSchema),
            createdAt: z.string(),
            _parentId: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                _id: "id",
                _creatorId: "creatorId",
                _environmentId: "environmentId",
                _organizationId: "organizationId",
                _entityId: "entityId",
                _parentId: "parentId",
            });
        });

    export type Outbound = {
        _id?: string | undefined;
        _creatorId: string;
        _environmentId: string;
        _organizationId: string;
        _entityId: string;
        enabled: boolean;
        type: string;
        change: Change$.Outbound;
        createdAt: string;
        _parentId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ChangeResponseDto> = z
        .object({
            id: z.string().optional(),
            creatorId: z.string(),
            environmentId: z.string(),
            organizationId: z.string(),
            entityId: z.string(),
            enabled: z.boolean(),
            type: ChangeResponseDtoType$.outboundSchema,
            change: z.lazy(() => Change$.outboundSchema),
            createdAt: z.string(),
            parentId: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                id: "_id",
                creatorId: "_creatorId",
                environmentId: "_environmentId",
                organizationId: "_organizationId",
                entityId: "_entityId",
                parentId: "_parentId",
            });
        });
}
