/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types";
import * as z from "zod";

/**
 * Message action status
 */
export const MarkMessageActionAsSeenDtoStatus = {
    Pending: "pending",
    Done: "done",
} as const;
/**
 * Message action status
 */
export type MarkMessageActionAsSeenDtoStatus = ClosedEnum<typeof MarkMessageActionAsSeenDtoStatus>;

/**
 * Message action payload
 */
export type MarkMessageActionAsSeenDtoPayload = {};

export type MarkMessageActionAsSeenDto = {
    /**
     * Message action status
     */
    status: MarkMessageActionAsSeenDtoStatus;
    /**
     * Message action payload
     */
    payload?: MarkMessageActionAsSeenDtoPayload | undefined;
};

/** @internal */
export namespace MarkMessageActionAsSeenDtoStatus$ {
    export const inboundSchema = z.nativeEnum(MarkMessageActionAsSeenDtoStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace MarkMessageActionAsSeenDtoPayload$ {
    export const inboundSchema: z.ZodType<
        MarkMessageActionAsSeenDtoPayload,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MarkMessageActionAsSeenDtoPayload
    > = z.object({});
}

/** @internal */
export namespace MarkMessageActionAsSeenDto$ {
    export const inboundSchema: z.ZodType<MarkMessageActionAsSeenDto, z.ZodTypeDef, unknown> =
        z.object({
            status: MarkMessageActionAsSeenDtoStatus$.inboundSchema,
            payload: z.lazy(() => MarkMessageActionAsSeenDtoPayload$.inboundSchema).optional(),
        });

    export type Outbound = {
        status: string;
        payload?: MarkMessageActionAsSeenDtoPayload$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MarkMessageActionAsSeenDto> =
        z.object({
            status: MarkMessageActionAsSeenDtoStatus$.outboundSchema,
            payload: z.lazy(() => MarkMessageActionAsSeenDtoPayload$.outboundSchema).optional(),
        });
}
