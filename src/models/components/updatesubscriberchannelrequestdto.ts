/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types";
import { ChannelCredentials, ChannelCredentials$ } from "./channelcredentials";
import * as z from "zod";

/**
 * The provider identifier for the credentials
 */
export const UpdateSubscriberChannelRequestDtoProviderId = {
    Slack: "slack",
    Discord: "discord",
    Msteams: "msteams",
    Mattermost: "mattermost",
    Ryver: "ryver",
    Zulip: "zulip",
    GrafanaOnCall: "grafana-on-call",
    Getstream: "getstream",
    RocketChat: "rocket-chat",
    WhatsappBusiness: "whatsapp-business",
    Fcm: "fcm",
    Apns: "apns",
    Expo: "expo",
    OneSignal: "one-signal",
    Pushpad: "pushpad",
    PushWebhook: "push-webhook",
    PusherBeams: "pusher-beams",
} as const;
/**
 * The provider identifier for the credentials
 */
export type UpdateSubscriberChannelRequestDtoProviderId = ClosedEnum<
    typeof UpdateSubscriberChannelRequestDtoProviderId
>;

export type UpdateSubscriberChannelRequestDto = {
    /**
     * The provider identifier for the credentials
     */
    providerId: UpdateSubscriberChannelRequestDtoProviderId;
    /**
     * The integration identifier
     */
    integrationIdentifier?: string | undefined;
    /**
     * Credentials payload for the specified provider
     */
    credentials: ChannelCredentials;
};

/** @internal */
export namespace UpdateSubscriberChannelRequestDtoProviderId$ {
    export const inboundSchema = z.nativeEnum(UpdateSubscriberChannelRequestDtoProviderId);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateSubscriberChannelRequestDto$ {
    export const inboundSchema: z.ZodType<
        UpdateSubscriberChannelRequestDto,
        z.ZodTypeDef,
        unknown
    > = z.object({
        providerId: UpdateSubscriberChannelRequestDtoProviderId$.inboundSchema,
        integrationIdentifier: z.string().optional(),
        credentials: ChannelCredentials$.inboundSchema,
    });

    export type Outbound = {
        providerId: string;
        integrationIdentifier?: string | undefined;
        credentials: ChannelCredentials$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateSubscriberChannelRequestDto
    > = z.object({
        providerId: UpdateSubscriberChannelRequestDtoProviderId$.outboundSchema,
        integrationIdentifier: z.string().optional(),
        credentials: ChannelCredentials$.outboundSchema,
    });
}
