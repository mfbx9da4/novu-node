/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import { ClosedEnum } from "../../types";
import { EmailBlock, EmailBlock$ } from "./emailblock";
import { MessageCTA, MessageCTA$ } from "./messagecta";
import { SubscriberResponseDto, SubscriberResponseDto$ } from "./subscriberresponsedto";
import { WorkflowResponse, WorkflowResponse$ } from "./workflowresponse";
import * as z from "zod";

export type Content = EmailBlock | string;

export const MessageResponseDtoChannel = {
    InApp: "in_app",
    Email: "email",
    Sms: "sms",
    Chat: "chat",
    Push: "push",
} as const;
export type MessageResponseDtoChannel = ClosedEnum<typeof MessageResponseDtoChannel>;

export const MessageResponseDtoStatus = {
    Sent: "sent",
    Error: "error",
    Warning: "warning",
} as const;
export type MessageResponseDtoStatus = ClosedEnum<typeof MessageResponseDtoStatus>;

/**
 * The payload that was used to send the notification trigger
 */
export type MessageResponseDtoPayload = {};

/**
 * Provider specific overrides used when triggering the notification
 */
export type MessageResponseDtoOverrides = {};

export type MessageResponseDto = {
    id?: string | undefined;
    templateId: string;
    environmentId: string;
    messageTemplateId: string;
    organizationId: string;
    notificationId: string;
    subscriberId: string;
    subscriber?: SubscriberResponseDto | undefined;
    template?: WorkflowResponse | undefined;
    templateIdentifier?: string | undefined;
    createdAt: string;
    lastSeenDate?: string | undefined;
    lastReadDate?: string | undefined;
    content: EmailBlock | string;
    transactionId: string;
    subject?: string | undefined;
    channel: MessageResponseDtoChannel;
    read: boolean;
    seen: boolean;
    email?: string | undefined;
    phone?: string | undefined;
    directWebhookUrl?: string | undefined;
    providerId?: string | undefined;
    deviceTokens?: Array<string> | undefined;
    title?: string | undefined;
    cta: MessageCTA;
    feedId?: string | null | undefined;
    status: MessageResponseDtoStatus;
    errorId: string;
    errorText: string;
    /**
     * The payload that was used to send the notification trigger
     */
    payload: MessageResponseDtoPayload;
    /**
     * Provider specific overrides used when triggering the notification
     */
    overrides: MessageResponseDtoOverrides;
};

/** @internal */
export namespace Content$ {
    export const inboundSchema: z.ZodType<Content, z.ZodTypeDef, unknown> = z.union([
        EmailBlock$.inboundSchema,
        z.string(),
    ]);

    export type Outbound = EmailBlock$.Outbound | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Content> = z.union([
        EmailBlock$.outboundSchema,
        z.string(),
    ]);
}

/** @internal */
export namespace MessageResponseDtoChannel$ {
    export const inboundSchema = z.nativeEnum(MessageResponseDtoChannel);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace MessageResponseDtoStatus$ {
    export const inboundSchema = z.nativeEnum(MessageResponseDtoStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace MessageResponseDtoPayload$ {
    export const inboundSchema: z.ZodType<MessageResponseDtoPayload, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MessageResponseDtoPayload> =
        z.object({});
}

/** @internal */
export namespace MessageResponseDtoOverrides$ {
    export const inboundSchema: z.ZodType<MessageResponseDtoOverrides, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MessageResponseDtoOverrides> =
        z.object({});
}

/** @internal */
export namespace MessageResponseDto$ {
    export const inboundSchema: z.ZodType<MessageResponseDto, z.ZodTypeDef, unknown> = z
        .object({
            _id: z.string().optional(),
            _templateId: z.string(),
            _environmentId: z.string(),
            _messageTemplateId: z.string(),
            _organizationId: z.string(),
            _notificationId: z.string(),
            _subscriberId: z.string(),
            subscriber: SubscriberResponseDto$.inboundSchema.optional(),
            template: WorkflowResponse$.inboundSchema.optional(),
            templateIdentifier: z.string().optional(),
            createdAt: z.string(),
            lastSeenDate: z.string().optional(),
            lastReadDate: z.string().optional(),
            content: z.union([EmailBlock$.inboundSchema, z.string()]),
            transactionId: z.string(),
            subject: z.string().optional(),
            channel: MessageResponseDtoChannel$.inboundSchema,
            read: z.boolean(),
            seen: z.boolean(),
            email: z.string().optional(),
            phone: z.string().optional(),
            directWebhookUrl: z.string().optional(),
            providerId: z.string().optional(),
            deviceTokens: z.array(z.string()).optional(),
            title: z.string().optional(),
            cta: MessageCTA$.inboundSchema,
            _feedId: z.nullable(z.string()).optional(),
            status: MessageResponseDtoStatus$.inboundSchema,
            errorId: z.string(),
            errorText: z.string(),
            payload: z.lazy(() => MessageResponseDtoPayload$.inboundSchema),
            overrides: z.lazy(() => MessageResponseDtoOverrides$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                _id: "id",
                _templateId: "templateId",
                _environmentId: "environmentId",
                _messageTemplateId: "messageTemplateId",
                _organizationId: "organizationId",
                _notificationId: "notificationId",
                _subscriberId: "subscriberId",
                _feedId: "feedId",
            });
        });

    export type Outbound = {
        _id?: string | undefined;
        _templateId: string;
        _environmentId: string;
        _messageTemplateId: string;
        _organizationId: string;
        _notificationId: string;
        _subscriberId: string;
        subscriber?: SubscriberResponseDto$.Outbound | undefined;
        template?: WorkflowResponse$.Outbound | undefined;
        templateIdentifier?: string | undefined;
        createdAt: string;
        lastSeenDate?: string | undefined;
        lastReadDate?: string | undefined;
        content: EmailBlock$.Outbound | string;
        transactionId: string;
        subject?: string | undefined;
        channel: string;
        read: boolean;
        seen: boolean;
        email?: string | undefined;
        phone?: string | undefined;
        directWebhookUrl?: string | undefined;
        providerId?: string | undefined;
        deviceTokens?: Array<string> | undefined;
        title?: string | undefined;
        cta: MessageCTA$.Outbound;
        _feedId?: string | null | undefined;
        status: string;
        errorId: string;
        errorText: string;
        payload: MessageResponseDtoPayload$.Outbound;
        overrides: MessageResponseDtoOverrides$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MessageResponseDto> = z
        .object({
            id: z.string().optional(),
            templateId: z.string(),
            environmentId: z.string(),
            messageTemplateId: z.string(),
            organizationId: z.string(),
            notificationId: z.string(),
            subscriberId: z.string(),
            subscriber: SubscriberResponseDto$.outboundSchema.optional(),
            template: WorkflowResponse$.outboundSchema.optional(),
            templateIdentifier: z.string().optional(),
            createdAt: z.string(),
            lastSeenDate: z.string().optional(),
            lastReadDate: z.string().optional(),
            content: z.union([EmailBlock$.outboundSchema, z.string()]),
            transactionId: z.string(),
            subject: z.string().optional(),
            channel: MessageResponseDtoChannel$.outboundSchema,
            read: z.boolean(),
            seen: z.boolean(),
            email: z.string().optional(),
            phone: z.string().optional(),
            directWebhookUrl: z.string().optional(),
            providerId: z.string().optional(),
            deviceTokens: z.array(z.string()).optional(),
            title: z.string().optional(),
            cta: MessageCTA$.outboundSchema,
            feedId: z.nullable(z.string()).optional(),
            status: MessageResponseDtoStatus$.outboundSchema,
            errorId: z.string(),
            errorText: z.string(),
            payload: z.lazy(() => MessageResponseDtoPayload$.outboundSchema),
            overrides: z.lazy(() => MessageResponseDtoOverrides$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                id: "_id",
                templateId: "_templateId",
                environmentId: "_environmentId",
                messageTemplateId: "_messageTemplateId",
                organizationId: "_organizationId",
                notificationId: "_notificationId",
                subscriberId: "_subscriberId",
                feedId: "_feedId",
            });
        });
}
