/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

export type TemplateResponse = {
    /**
     * Unique identifier of the workflow
     */
    id: string;
    /**
     * Name of the workflow
     */
    name: string;
    /**
     * Critical templates will always be delivered to the end user and should be hidden from the subscriber preferences screen
     */
    critical: boolean;
    /**
     * Triggers are the events that will trigger the workflow.
     */
    triggers: Array<string>;
};

/** @internal */
export namespace TemplateResponse$ {
    export const inboundSchema: z.ZodType<TemplateResponse, z.ZodTypeDef, unknown> = z
        .object({
            _id: z.string(),
            name: z.string(),
            critical: z.boolean(),
            triggers: z.array(z.string()),
        })
        .transform((v) => {
            return remap$(v, {
                _id: "id",
            });
        });

    export type Outbound = {
        _id: string;
        name: string;
        critical: boolean;
        triggers: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TemplateResponse> = z
        .object({
            id: z.string(),
            name: z.string(),
            critical: z.boolean(),
            triggers: z.array(z.string()),
        })
        .transform((v) => {
            return remap$(v, {
                id: "_id",
            });
        });
}
