/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import { ClosedEnum } from "../../types";
import * as z from "zod";

export const GetLayoutResponseDtoChannel = {
    InApp: "in_app",
    Email: "email",
    Sms: "sms",
    Chat: "chat",
    Push: "push",
} as const;
export type GetLayoutResponseDtoChannel = ClosedEnum<typeof GetLayoutResponseDtoChannel>;

export type Variables = {};

export type GetLayoutResponseDto = {
    id?: string | undefined;
    organizationId: string;
    environmentId: string;
    creatorId: string;
    name: string;
    identifier: string;
    description?: string | undefined;
    channel: GetLayoutResponseDtoChannel;
    content: string;
    contentType: string;
    variables?: Array<Variables> | undefined;
    isDefault: boolean;
    isDeleted: boolean;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
    parentId?: string | undefined;
};

/** @internal */
export namespace GetLayoutResponseDtoChannel$ {
    export const inboundSchema = z.nativeEnum(GetLayoutResponseDtoChannel);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Variables$ {
    export const inboundSchema: z.ZodType<Variables, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Variables> = z.object({});
}

/** @internal */
export namespace GetLayoutResponseDto$ {
    export const inboundSchema: z.ZodType<GetLayoutResponseDto, z.ZodTypeDef, unknown> = z
        .object({
            _id: z.string().optional(),
            _organizationId: z.string(),
            _environmentId: z.string(),
            _creatorId: z.string(),
            name: z.string(),
            identifier: z.string(),
            description: z.string().optional(),
            channel: GetLayoutResponseDtoChannel$.inboundSchema,
            content: z.string(),
            contentType: z.string(),
            variables: z.array(z.lazy(() => Variables$.inboundSchema)).optional(),
            isDefault: z.boolean(),
            isDeleted: z.boolean(),
            createdAt: z.string().optional(),
            updatedAt: z.string().optional(),
            _parentId: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                _id: "id",
                _organizationId: "organizationId",
                _environmentId: "environmentId",
                _creatorId: "creatorId",
                _parentId: "parentId",
            });
        });

    export type Outbound = {
        _id?: string | undefined;
        _organizationId: string;
        _environmentId: string;
        _creatorId: string;
        name: string;
        identifier: string;
        description?: string | undefined;
        channel: string;
        content: string;
        contentType: string;
        variables?: Array<Variables$.Outbound> | undefined;
        isDefault: boolean;
        isDeleted: boolean;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        _parentId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLayoutResponseDto> = z
        .object({
            id: z.string().optional(),
            organizationId: z.string(),
            environmentId: z.string(),
            creatorId: z.string(),
            name: z.string(),
            identifier: z.string(),
            description: z.string().optional(),
            channel: GetLayoutResponseDtoChannel$.outboundSchema,
            content: z.string(),
            contentType: z.string(),
            variables: z.array(z.lazy(() => Variables$.outboundSchema)).optional(),
            isDefault: z.boolean(),
            isDeleted: z.boolean(),
            createdAt: z.string().optional(),
            updatedAt: z.string().optional(),
            parentId: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                id: "_id",
                organizationId: "_organizationId",
                environmentId: "_environmentId",
                creatorId: "_creatorId",
                parentId: "_parentId",
            });
        });
}
