/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types";
import {
    NotificationTriggerVariable,
    NotificationTriggerVariable$,
} from "./notificationtriggervariable";
import * as z from "zod";

export const NotificationTriggerType = {
    Event: "event",
} as const;
export type NotificationTriggerType = ClosedEnum<typeof NotificationTriggerType>;

export type NotificationTrigger = {
    type: NotificationTriggerType;
    identifier: string;
    variables: Array<NotificationTriggerVariable>;
    subscriberVariables?: Array<NotificationTriggerVariable> | undefined;
};

/** @internal */
export namespace NotificationTriggerType$ {
    export const inboundSchema = z.nativeEnum(NotificationTriggerType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace NotificationTrigger$ {
    export const inboundSchema: z.ZodType<NotificationTrigger, z.ZodTypeDef, unknown> = z.object({
        type: NotificationTriggerType$.inboundSchema,
        identifier: z.string(),
        variables: z.array(NotificationTriggerVariable$.inboundSchema),
        subscriberVariables: z.array(NotificationTriggerVariable$.inboundSchema).optional(),
    });

    export type Outbound = {
        type: string;
        identifier: string;
        variables: Array<NotificationTriggerVariable$.Outbound>;
        subscriberVariables?: Array<NotificationTriggerVariable$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NotificationTrigger> = z.object({
        type: NotificationTriggerType$.outboundSchema,
        identifier: z.string(),
        variables: z.array(NotificationTriggerVariable$.outboundSchema),
        subscriberVariables: z.array(NotificationTriggerVariable$.outboundSchema).optional(),
    });
}
