/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types";
import * as z from "zod";

export const JobTitle = {
    Engineer: "engineer",
    EngineeringManager: "engineering_manager",
    Architect: "architect",
    ProductManager: "product_manager",
    Designer: "designer",
    CxoFounder: "cxo_founder",
    MarketingManager: "marketing_manager",
    Other: "other",
} as const;
export type JobTitle = ClosedEnum<typeof JobTitle>;

export type ProductUseCases = {};

export type CreateOrganizationDto = {
    name: string;
    logo?: string | undefined;
    jobTitle?: JobTitle | undefined;
    domain?: string | undefined;
    productUseCases?: ProductUseCases | undefined;
};

/** @internal */
export namespace JobTitle$ {
    export const inboundSchema = z.nativeEnum(JobTitle);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ProductUseCases$ {
    export const inboundSchema: z.ZodType<ProductUseCases, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ProductUseCases> = z.object({});
}

/** @internal */
export namespace CreateOrganizationDto$ {
    export const inboundSchema: z.ZodType<CreateOrganizationDto, z.ZodTypeDef, unknown> = z.object({
        name: z.string(),
        logo: z.string().optional(),
        jobTitle: JobTitle$.inboundSchema.optional(),
        domain: z.string().optional(),
        productUseCases: z.lazy(() => ProductUseCases$.inboundSchema).optional(),
    });

    export type Outbound = {
        name: string;
        logo?: string | undefined;
        jobTitle?: string | undefined;
        domain?: string | undefined;
        productUseCases?: ProductUseCases$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateOrganizationDto> =
        z.object({
            name: z.string(),
            logo: z.string().optional(),
            jobTitle: JobTitle$.outboundSchema.optional(),
            domain: z.string().optional(),
            productUseCases: z.lazy(() => ProductUseCases$.outboundSchema).optional(),
        });
}
