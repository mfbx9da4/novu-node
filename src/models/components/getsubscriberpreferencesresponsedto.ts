/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Preference, Preference$ } from "./preference";
import { TemplateResponse, TemplateResponse$ } from "./templateresponse";
import * as z from "zod";

export type GetSubscriberPreferencesResponseDto = {
    /**
     * The workflow information and if it is critical or not
     */
    template?: TemplateResponse | undefined;
    /**
     * The preferences of the subscriber regarding the related workflow
     */
    preference: Preference;
};

/** @internal */
export namespace GetSubscriberPreferencesResponseDto$ {
    export const inboundSchema: z.ZodType<
        GetSubscriberPreferencesResponseDto,
        z.ZodTypeDef,
        unknown
    > = z.object({
        template: TemplateResponse$.inboundSchema.optional(),
        preference: Preference$.inboundSchema,
    });

    export type Outbound = {
        template?: TemplateResponse$.Outbound | undefined;
        preference: Preference$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetSubscriberPreferencesResponseDto
    > = z.object({
        template: TemplateResponse$.outboundSchema.optional(),
        preference: Preference$.outboundSchema,
    });
}
