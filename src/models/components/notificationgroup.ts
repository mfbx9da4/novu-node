/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

export type NotificationGroup = {
    id?: string | undefined;
    name: string;
    environmentId: string;
    organizationId: string;
    parentId?: string | undefined;
};

/** @internal */
export namespace NotificationGroup$ {
    export const inboundSchema: z.ZodType<NotificationGroup, z.ZodTypeDef, unknown> = z
        .object({
            _id: z.string().optional(),
            name: z.string(),
            _environmentId: z.string(),
            _organizationId: z.string(),
            _parentId: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                _id: "id",
                _environmentId: "environmentId",
                _organizationId: "organizationId",
                _parentId: "parentId",
            });
        });

    export type Outbound = {
        _id?: string | undefined;
        name: string;
        _environmentId: string;
        _organizationId: string;
        _parentId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NotificationGroup> = z
        .object({
            id: z.string().optional(),
            name: z.string(),
            environmentId: z.string(),
            organizationId: z.string(),
            parentId: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                id: "_id",
                environmentId: "_environmentId",
                organizationId: "_organizationId",
                parentId: "_parentId",
            });
        });
}
