/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import {
    ActivityNotificationExecutionDetailResponseDto,
    ActivityNotificationExecutionDetailResponseDto$,
} from "./activitynotificationexecutiondetailresponsedto";
import {
    ActivityNotificationStepResponseDto,
    ActivityNotificationStepResponseDto$,
} from "./activitynotificationstepresponsedto";
import * as z from "zod";

export type Digest = {};

export type ActivityNotificationJobResponseDtoPayload = {};

export type ActivityNotificationJobResponseDtoProviderId = {};

export type ActivityNotificationJobResponseDto = {
    id: string;
    type: string;
    digest?: Digest | undefined;
    executionDetails: Array<ActivityNotificationExecutionDetailResponseDto>;
    step: ActivityNotificationStepResponseDto;
    payload?: ActivityNotificationJobResponseDtoPayload | undefined;
    providerId: ActivityNotificationJobResponseDtoProviderId;
    status: string;
};

/** @internal */
export namespace Digest$ {
    export const inboundSchema: z.ZodType<Digest, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Digest> = z.object({});
}

/** @internal */
export namespace ActivityNotificationJobResponseDtoPayload$ {
    export const inboundSchema: z.ZodType<
        ActivityNotificationJobResponseDtoPayload,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ActivityNotificationJobResponseDtoPayload
    > = z.object({});
}

/** @internal */
export namespace ActivityNotificationJobResponseDtoProviderId$ {
    export const inboundSchema: z.ZodType<
        ActivityNotificationJobResponseDtoProviderId,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ActivityNotificationJobResponseDtoProviderId
    > = z.object({});
}

/** @internal */
export namespace ActivityNotificationJobResponseDto$ {
    export const inboundSchema: z.ZodType<
        ActivityNotificationJobResponseDto,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            _id: z.string(),
            type: z.string(),
            digest: z.lazy(() => Digest$.inboundSchema).optional(),
            executionDetails: z.array(
                ActivityNotificationExecutionDetailResponseDto$.inboundSchema
            ),
            step: ActivityNotificationStepResponseDto$.inboundSchema,
            payload: z
                .lazy(() => ActivityNotificationJobResponseDtoPayload$.inboundSchema)
                .optional(),
            providerId: z.lazy(() => ActivityNotificationJobResponseDtoProviderId$.inboundSchema),
            status: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                _id: "id",
            });
        });

    export type Outbound = {
        _id: string;
        type: string;
        digest?: Digest$.Outbound | undefined;
        executionDetails: Array<ActivityNotificationExecutionDetailResponseDto$.Outbound>;
        step: ActivityNotificationStepResponseDto$.Outbound;
        payload?: ActivityNotificationJobResponseDtoPayload$.Outbound | undefined;
        providerId: ActivityNotificationJobResponseDtoProviderId$.Outbound;
        status: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ActivityNotificationJobResponseDto
    > = z
        .object({
            id: z.string(),
            type: z.string(),
            digest: z.lazy(() => Digest$.outboundSchema).optional(),
            executionDetails: z.array(
                ActivityNotificationExecutionDetailResponseDto$.outboundSchema
            ),
            step: ActivityNotificationStepResponseDto$.outboundSchema,
            payload: z
                .lazy(() => ActivityNotificationJobResponseDtoPayload$.outboundSchema)
                .optional(),
            providerId: z.lazy(() => ActivityNotificationJobResponseDtoProviderId$.outboundSchema),
            status: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                id: "_id",
            });
        });
}
