/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Translations = {};

export type System = {};

export type VariablesResponseDto = {
    translations: Translations;
    system: System;
};

/** @internal */
export namespace Translations$ {
    export const inboundSchema: z.ZodType<Translations, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Translations> = z.object({});
}

/** @internal */
export namespace System$ {
    export const inboundSchema: z.ZodType<System, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, System> = z.object({});
}

/** @internal */
export namespace VariablesResponseDto$ {
    export const inboundSchema: z.ZodType<VariablesResponseDto, z.ZodTypeDef, unknown> = z.object({
        translations: z.lazy(() => Translations$.inboundSchema),
        system: z.lazy(() => System$.inboundSchema),
    });

    export type Outbound = {
        translations: Translations$.Outbound;
        system: System$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, VariablesResponseDto> = z.object(
        {
            translations: z.lazy(() => Translations$.outboundSchema),
            system: z.lazy(() => System$.outboundSchema),
        }
    );
}
