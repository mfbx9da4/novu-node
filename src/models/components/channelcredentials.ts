/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type ChannelCredentials = {
    /**
     * Webhook url used by chat app integrations. The webhook should be obtained from the chat app provider.
     */
    webhookUrl: string;
    /**
     * Channel specification for Mattermost chat notifications
     */
    channel?: string | undefined;
    /**
     * Contains an array of the subscriber device tokens for a given provider. Used on Push integrations
     */
    deviceTokens?: Array<string> | undefined;
    /**
     * alert_uid for grafana on-call webhook payload
     */
    alertUid?: string | undefined;
    /**
     * title to be used with grafana on call webhook
     */
    title?: string | undefined;
    /**
     * image_url property fo grafana on call webhook
     */
    imageUrl?: string | undefined;
    /**
     * state property fo grafana on call webhook
     */
    state?: string | undefined;
    /**
     * link_to_upstream_details property fo grafana on call webhook
     */
    externalUrl?: string | undefined;
};

/** @internal */
export namespace ChannelCredentials$ {
    export const inboundSchema: z.ZodType<ChannelCredentials, z.ZodTypeDef, unknown> = z.object({
        webhookUrl: z.string(),
        channel: z.string().optional(),
        deviceTokens: z.array(z.string()).optional(),
        alertUid: z.string().optional(),
        title: z.string().optional(),
        imageUrl: z.string().optional(),
        state: z.string().optional(),
        externalUrl: z.string().optional(),
    });

    export type Outbound = {
        webhookUrl: string;
        channel?: string | undefined;
        deviceTokens?: Array<string> | undefined;
        alertUid?: string | undefined;
        title?: string | undefined;
        imageUrl?: string | undefined;
        state?: string | undefined;
        externalUrl?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ChannelCredentials> = z.object({
        webhookUrl: z.string(),
        channel: z.string().optional(),
        deviceTokens: z.array(z.string()).optional(),
        alertUid: z.string().optional(),
        title: z.string().optional(),
        imageUrl: z.string().optional(),
        state: z.string().optional(),
        externalUrl: z.string().optional(),
    });
}
