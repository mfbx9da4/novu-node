/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import { ClosedEnum } from "../../types";
import * as z from "zod";

export type FilterLayoutsSecurity = {
    bearer?: string | undefined;
    apiKey?: string | undefined;
};

/**
 * Direction of the sorting query param
 */
export const OrderBy = {
    Asc: "ASC",
    Desc: "DESC",
} as const;
/**
 * Direction of the sorting query param
 */
export type OrderBy = ClosedEnum<typeof OrderBy>;

export type FilterLayoutsRequest = {
    /**
     * Number of page for pagination
     */
    page?: number | undefined;
    /**
     * Size of page for pagination
     */
    pageSize?: number | undefined;
    /**
     * Sort field. Currently only supported `createdAt`
     */
    sortBy?: string | undefined;
    /**
     * Direction of the sorting query param
     */
    orderBy?: OrderBy | undefined;
};

/** @internal */
export namespace FilterLayoutsSecurity$ {
    export const inboundSchema: z.ZodType<FilterLayoutsSecurity, z.ZodTypeDef, unknown> = z
        .object({
            bearer: z.string().optional(),
            "api-key": z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                "api-key": "apiKey",
            });
        });

    export type Outbound = {
        bearer?: string | undefined;
        "api-key"?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FilterLayoutsSecurity> = z
        .object({
            bearer: z.string().optional(),
            apiKey: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                apiKey: "api-key",
            });
        });
}

/** @internal */
export namespace OrderBy$ {
    export const inboundSchema = z.nativeEnum(OrderBy);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FilterLayoutsRequest$ {
    export const inboundSchema: z.ZodType<FilterLayoutsRequest, z.ZodTypeDef, unknown> = z.object({
        page: z.number().optional(),
        pageSize: z.number().optional(),
        sortBy: z.string().optional(),
        orderBy: OrderBy$.inboundSchema.optional(),
    });

    export type Outbound = {
        page?: number | undefined;
        pageSize?: number | undefined;
        sortBy?: string | undefined;
        orderBy?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FilterLayoutsRequest> = z.object(
        {
            page: z.number().optional(),
            pageSize: z.number().optional(),
            sortBy: z.string().optional(),
            orderBy: OrderBy$.outboundSchema.optional(),
        }
    );
}
