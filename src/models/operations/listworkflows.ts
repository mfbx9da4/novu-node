/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

export type ListWorkflowsSecurity = {
    bearer?: string | undefined;
    apiKey?: string | undefined;
};

export type ListWorkflowsRequest = {
    page?: number | undefined;
    limit?: number | undefined;
    /**
     * A query string to filter the results. It allows filtering based on either the name or trigger identifier of the workflow items.
     */
    query?: string | undefined;
};

/** @internal */
export namespace ListWorkflowsSecurity$ {
    export const inboundSchema: z.ZodType<ListWorkflowsSecurity, z.ZodTypeDef, unknown> = z
        .object({
            bearer: z.string().optional(),
            "api-key": z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                "api-key": "apiKey",
            });
        });

    export type Outbound = {
        bearer?: string | undefined;
        "api-key"?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListWorkflowsSecurity> = z
        .object({
            bearer: z.string().optional(),
            apiKey: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                apiKey: "api-key",
            });
        });
}

/** @internal */
export namespace ListWorkflowsRequest$ {
    export const inboundSchema: z.ZodType<ListWorkflowsRequest, z.ZodTypeDef, unknown> = z.object({
        page: z.number().optional(),
        limit: z.number().default(10),
        query: z.string().optional(),
    });

    export type Outbound = {
        page?: number | undefined;
        limit: number;
        query?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListWorkflowsRequest> = z.object(
        {
            page: z.number().optional(),
            limit: z.number().default(10),
            query: z.string().optional(),
        }
    );
}
