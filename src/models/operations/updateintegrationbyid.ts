/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

export type UpdateIntegrationByIdSecurity = {
    bearer?: string | undefined;
    apiKey?: string | undefined;
};

export type UpdateIntegrationByIdRequest = {
    integrationId: string;
    updateIntegrationRequestDto: components.UpdateIntegrationRequestDto;
};

/** @internal */
export namespace UpdateIntegrationByIdSecurity$ {
    export const inboundSchema: z.ZodType<UpdateIntegrationByIdSecurity, z.ZodTypeDef, unknown> = z
        .object({
            bearer: z.string().optional(),
            "api-key": z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                "api-key": "apiKey",
            });
        });

    export type Outbound = {
        bearer?: string | undefined;
        "api-key"?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateIntegrationByIdSecurity> =
        z
            .object({
                bearer: z.string().optional(),
                apiKey: z.string().optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    apiKey: "api-key",
                });
            });
}

/** @internal */
export namespace UpdateIntegrationByIdRequest$ {
    export const inboundSchema: z.ZodType<UpdateIntegrationByIdRequest, z.ZodTypeDef, unknown> = z
        .object({
            integrationId: z.string(),
            UpdateIntegrationRequestDto: components.UpdateIntegrationRequestDto$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                UpdateIntegrationRequestDto: "updateIntegrationRequestDto",
            });
        });

    export type Outbound = {
        integrationId: string;
        UpdateIntegrationRequestDto: components.UpdateIntegrationRequestDto$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateIntegrationByIdRequest> = z
        .object({
            integrationId: z.string(),
            updateIntegrationRequestDto: components.UpdateIntegrationRequestDto$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                updateIntegrationRequestDto: "UpdateIntegrationRequestDto",
            });
        });
}
