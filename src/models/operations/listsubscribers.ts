/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

export type ListSubscribersSecurity = {
    bearer?: string | undefined;
    apiKey?: string | undefined;
};

export type ListSubscribersRequest = {
    page?: number | undefined;
    limit?: number | undefined;
};

export type ListSubscribersResponseBody = {
    /**
     * The current page of the paginated response
     */
    page: number;
    /**
     * Does the list have more items to fetch
     */
    hasMore: boolean;
    /**
     * Number of items on each page
     */
    pageSize: number;
    data: Array<components.SubscriberResponseDto>;
};

export type ListSubscribersResponse = {
    result: ListSubscribersResponseBody;
};

/** @internal */
export namespace ListSubscribersSecurity$ {
    export const inboundSchema: z.ZodType<ListSubscribersSecurity, z.ZodTypeDef, unknown> = z
        .object({
            bearer: z.string().optional(),
            "api-key": z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                "api-key": "apiKey",
            });
        });

    export type Outbound = {
        bearer?: string | undefined;
        "api-key"?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListSubscribersSecurity> = z
        .object({
            bearer: z.string().optional(),
            apiKey: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                apiKey: "api-key",
            });
        });
}

/** @internal */
export namespace ListSubscribersRequest$ {
    export const inboundSchema: z.ZodType<ListSubscribersRequest, z.ZodTypeDef, unknown> = z.object(
        {
            page: z.number().optional(),
            limit: z.number().default(10),
        }
    );

    export type Outbound = {
        page?: number | undefined;
        limit: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListSubscribersRequest> =
        z.object({
            page: z.number().optional(),
            limit: z.number().default(10),
        });
}

/** @internal */
export namespace ListSubscribersResponseBody$ {
    export const inboundSchema: z.ZodType<ListSubscribersResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            page: z.number(),
            hasMore: z.boolean(),
            pageSize: z.number(),
            data: z.array(components.SubscriberResponseDto$.inboundSchema),
        });

    export type Outbound = {
        page: number;
        hasMore: boolean;
        pageSize: number;
        data: Array<components.SubscriberResponseDto$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListSubscribersResponseBody> =
        z.object({
            page: z.number(),
            hasMore: z.boolean(),
            pageSize: z.number(),
            data: z.array(components.SubscriberResponseDto$.outboundSchema),
        });
}

/** @internal */
export namespace ListSubscribersResponse$ {
    export const inboundSchema: z.ZodType<ListSubscribersResponse, z.ZodTypeDef, unknown> = z
        .object({
            Result: z.lazy(() => ListSubscribersResponseBody$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                Result: "result",
            });
        });

    export type Outbound = {
        Result: ListSubscribersResponseBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListSubscribersResponse> = z
        .object({
            result: z.lazy(() => ListSubscribersResponseBody$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                result: "Result",
            });
        });
}
