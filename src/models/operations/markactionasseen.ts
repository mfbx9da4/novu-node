/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

export type MarkActionAsSeenSecurity = {
    bearer?: string | undefined;
    apiKey?: string | undefined;
};

export type MarkActionAsSeenRequest = {
    messageId: string;
    type: string;
    subscriberId: string;
    markMessageActionAsSeenDto: components.MarkMessageActionAsSeenDto;
};

/** @internal */
export namespace MarkActionAsSeenSecurity$ {
    export const inboundSchema: z.ZodType<MarkActionAsSeenSecurity, z.ZodTypeDef, unknown> = z
        .object({
            bearer: z.string().optional(),
            "api-key": z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                "api-key": "apiKey",
            });
        });

    export type Outbound = {
        bearer?: string | undefined;
        "api-key"?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MarkActionAsSeenSecurity> = z
        .object({
            bearer: z.string().optional(),
            apiKey: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                apiKey: "api-key",
            });
        });
}

/** @internal */
export namespace MarkActionAsSeenRequest$ {
    export const inboundSchema: z.ZodType<MarkActionAsSeenRequest, z.ZodTypeDef, unknown> = z
        .object({
            messageId: z.string(),
            type: z.string(),
            subscriberId: z.string(),
            MarkMessageActionAsSeenDto: components.MarkMessageActionAsSeenDto$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                MarkMessageActionAsSeenDto: "markMessageActionAsSeenDto",
            });
        });

    export type Outbound = {
        messageId: string;
        type: string;
        subscriberId: string;
        MarkMessageActionAsSeenDto: components.MarkMessageActionAsSeenDto$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MarkActionAsSeenRequest> = z
        .object({
            messageId: z.string(),
            type: z.string(),
            subscriberId: z.string(),
            markMessageActionAsSeenDto: components.MarkMessageActionAsSeenDto$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                markMessageActionAsSeenDto: "MarkMessageActionAsSeenDto",
            });
        });
}
