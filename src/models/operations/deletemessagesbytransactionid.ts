/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import { ClosedEnum } from "../../types";
import * as z from "zod";

export type DeleteMessagesByTransactionIdSecurity = {
    bearer?: string | undefined;
    apiKey?: string | undefined;
};

/**
 * The channel of the message to be deleted
 */
export const QueryParamChannel = {
    InApp: "in_app",
    Email: "email",
    Sms: "sms",
    Chat: "chat",
    Push: "push",
} as const;
/**
 * The channel of the message to be deleted
 */
export type QueryParamChannel = ClosedEnum<typeof QueryParamChannel>;

export type DeleteMessagesByTransactionIdRequest = {
    /**
     * The channel of the message to be deleted
     */
    channel?: QueryParamChannel | undefined;
    transactionId: string;
};

/** @internal */
export namespace DeleteMessagesByTransactionIdSecurity$ {
    export const inboundSchema: z.ZodType<
        DeleteMessagesByTransactionIdSecurity,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            bearer: z.string().optional(),
            "api-key": z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                "api-key": "apiKey",
            });
        });

    export type Outbound = {
        bearer?: string | undefined;
        "api-key"?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeleteMessagesByTransactionIdSecurity
    > = z
        .object({
            bearer: z.string().optional(),
            apiKey: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                apiKey: "api-key",
            });
        });
}

/** @internal */
export namespace QueryParamChannel$ {
    export const inboundSchema = z.nativeEnum(QueryParamChannel);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace DeleteMessagesByTransactionIdRequest$ {
    export const inboundSchema: z.ZodType<
        DeleteMessagesByTransactionIdRequest,
        z.ZodTypeDef,
        unknown
    > = z.object({
        channel: QueryParamChannel$.inboundSchema.optional(),
        transactionId: z.string(),
    });

    export type Outbound = {
        channel?: string | undefined;
        transactionId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeleteMessagesByTransactionIdRequest
    > = z.object({
        channel: QueryParamChannel$.outboundSchema.optional(),
        transactionId: z.string(),
    });
}
