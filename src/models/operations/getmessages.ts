/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import { ClosedEnum } from "../../types";
import * as z from "zod";

export type GetMessagesSecurity = {
    bearer?: string | undefined;
    apiKey?: string | undefined;
};

export const Channel = {
    InApp: "in_app",
    Email: "email",
    Sms: "sms",
    Chat: "chat",
    Push: "push",
} as const;
export type Channel = ClosedEnum<typeof Channel>;

export type GetMessagesRequest = {
    channel?: Channel | undefined;
    subscriberId?: string | undefined;
    transactionId?: Array<string> | undefined;
    page?: number | undefined;
    limit?: number | undefined;
};

/** @internal */
export namespace GetMessagesSecurity$ {
    export const inboundSchema: z.ZodType<GetMessagesSecurity, z.ZodTypeDef, unknown> = z
        .object({
            bearer: z.string().optional(),
            "api-key": z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                "api-key": "apiKey",
            });
        });

    export type Outbound = {
        bearer?: string | undefined;
        "api-key"?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMessagesSecurity> = z
        .object({
            bearer: z.string().optional(),
            apiKey: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                apiKey: "api-key",
            });
        });
}

/** @internal */
export namespace Channel$ {
    export const inboundSchema = z.nativeEnum(Channel);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetMessagesRequest$ {
    export const inboundSchema: z.ZodType<GetMessagesRequest, z.ZodTypeDef, unknown> = z.object({
        channel: Channel$.inboundSchema.optional(),
        subscriberId: z.string().optional(),
        transactionId: z.array(z.string()).optional(),
        page: z.number().default(0),
        limit: z.number().default(10),
    });

    export type Outbound = {
        channel?: string | undefined;
        subscriberId?: string | undefined;
        transactionId?: Array<string> | undefined;
        page: number;
        limit: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMessagesRequest> = z.object({
        channel: Channel$.outboundSchema.optional(),
        subscriberId: z.string().optional(),
        transactionId: z.array(z.string()).optional(),
        page: z.number().default(0),
        limit: z.number().default(10),
    });
}
