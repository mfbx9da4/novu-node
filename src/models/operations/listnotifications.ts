/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import { ClosedEnum } from "../../types";
import * as z from "zod";

export type ListNotificationsSecurity = {
    apiKey?: string | undefined;
    bearer?: string | undefined;
};

export const Channels = {
    InApp: "in_app",
    Email: "email",
    Sms: "sms",
    Chat: "chat",
    Push: "push",
} as const;
export type Channels = ClosedEnum<typeof Channels>;

export type ListNotificationsRequest = {
    channels: Array<Channels>;
    templates: Array<string>;
    emails: Array<string>;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    search: string;
    subscriberIds: Array<string>;
    page?: number | undefined;
    transactionId?: string | undefined;
};

/** @internal */
export namespace ListNotificationsSecurity$ {
    export const inboundSchema: z.ZodType<ListNotificationsSecurity, z.ZodTypeDef, unknown> = z
        .object({
            "api-key": z.string().optional(),
            bearer: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                "api-key": "apiKey",
            });
        });

    export type Outbound = {
        "api-key"?: string | undefined;
        bearer?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListNotificationsSecurity> = z
        .object({
            apiKey: z.string().optional(),
            bearer: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                apiKey: "api-key",
            });
        });
}

/** @internal */
export namespace Channels$ {
    export const inboundSchema = z.nativeEnum(Channels);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ListNotificationsRequest$ {
    export const inboundSchema: z.ZodType<ListNotificationsRequest, z.ZodTypeDef, unknown> =
        z.object({
            channels: z.array(Channels$.inboundSchema),
            templates: z.array(z.string()),
            emails: z.array(z.string()),
            search: z.string(),
            subscriberIds: z.array(z.string()),
            page: z.number().default(0),
            transactionId: z.string().optional(),
        });

    export type Outbound = {
        channels: Array<string>;
        templates: Array<string>;
        emails: Array<string>;
        search: string;
        subscriberIds: Array<string>;
        page: number;
        transactionId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListNotificationsRequest> =
        z.object({
            channels: z.array(Channels$.outboundSchema),
            templates: z.array(z.string()),
            emails: z.array(z.string()),
            search: z.string(),
            subscriberIds: z.array(z.string()),
            page: z.number().default(0),
            transactionId: z.string().optional(),
        });
}
