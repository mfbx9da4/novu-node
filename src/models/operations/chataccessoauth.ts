/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

export type ChatAccessOauthSecurity = {
    apiKey: string;
};

export type ChatAccessOauthRequest = {
    subscriberId: string;
    providerId: string;
    hmacHash: string;
    environmentId: string;
    integrationIdentifier?: string | undefined;
};

/** @internal */
export namespace ChatAccessOauthSecurity$ {
    export const inboundSchema: z.ZodType<ChatAccessOauthSecurity, z.ZodTypeDef, unknown> = z
        .object({
            "api-key": z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                "api-key": "apiKey",
            });
        });

    export type Outbound = {
        "api-key": string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ChatAccessOauthSecurity> = z
        .object({
            apiKey: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                apiKey: "api-key",
            });
        });
}

/** @internal */
export namespace ChatAccessOauthRequest$ {
    export const inboundSchema: z.ZodType<ChatAccessOauthRequest, z.ZodTypeDef, unknown> = z.object(
        {
            subscriberId: z.string(),
            providerId: z.string(),
            hmacHash: z.string(),
            environmentId: z.string(),
            integrationIdentifier: z.string().optional(),
        }
    );

    export type Outbound = {
        subscriberId: string;
        providerId: string;
        hmacHash: string;
        environmentId: string;
        integrationIdentifier?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ChatAccessOauthRequest> =
        z.object({
            subscriberId: z.string(),
            providerId: z.string(),
            hmacHash: z.string(),
            environmentId: z.string(),
            integrationIdentifier: z.string().optional(),
        });
}
